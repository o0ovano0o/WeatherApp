{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Think Fap\\\\Documents\\\\GitHub\\\\WeatherApp\\\\App.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Main from \"./app/screen/MainScreen\";\nimport * as weatherActions from \"../actions\";\n\nfunction useFonts(fontMap) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontsLoaded = _useState2[0],\n      setFontsLoaded = _useState2[1];\n\n  (function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Font.loadAsync(fontMap));\n\n          case 2:\n            setFontsLoaded(true);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  })();\n\n  return [fontsLoaded];\n}\n\nvar _useFonts = useFonts({\n  'montserrat-700': require(\"./app/assets/fonts/montserrat-700.ttf\"),\n  'montserrat-regular': require(\"./app/assets/fonts/montserrat-regular.ttf\"),\n  'verdana-regular': require(\"./app/assets/fonts/verdana-regular.ttf\")\n}),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n\nexport var WeatherApp = function (_Component) {\n  _inherits(WeatherApp, _Component);\n\n  var _super = _createSuper(WeatherApp);\n\n  function WeatherApp() {\n    _classCallCheck(this, WeatherApp);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WeatherApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          state = _this$props.state,\n          actions = _this$props.actions;\n      var weatherData = state.weatherData,\n          errorMessage = state.errorMessage,\n          isLoading = state.isLoading,\n          isFahrenheit = state.isFahrenheit;\n\n      if (!fontsLoaded) {\n        return React.createElement(AppLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 12\n          }\n        });\n      } else {\n        return React.createElement(Main, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 6\n          }\n        });\n      }\n    }\n  }]);\n\n  return WeatherApp;\n}(Component);\n;","map":{"version":3,"sources":["C:/Users/Think Fap/Documents/GitHub/WeatherApp/App.js"],"names":["React","useEffect","useState","AppLoading","Font","bindActionCreators","connect","Main","weatherActions","useFonts","fontMap","fontsLoaded","setFontsLoaded","loadAsync","require","WeatherApp","props","state","actions","weatherData","errorMessage","isLoading","isFahrenheit","Component"],"mappings":";;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP;AACA,OAAO,KAAKC,cAAZ;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,kBACWR,QAAQ,CAAC,KAAD,CADnB;AAAA;AAAA,MACpBS,WADoB;AAAA,MACPC,cADO;;AAEzB,GAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACOR,IAAI,CAACS,SAAL,CAAeH,OAAf,CADP;;AAAA;AAECE,YAAAA,cAAc,CAAC,IAAD,CAAd;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;;AAIA,SAAO,CAACD,WAAD,CAAP;AACD;;gBACmBF,QAAQ,CAAC;AACzB,oBAAkBK,OAAO,yCADA;AAE7B,wBAAsBA,OAAO,6CAFA;AAG7B,qBAAmBA,OAAO;AAHG,CAAD,C;;IAAvBH,W;;AAKL,WAAaI,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAEU;AAAA,wBACqB,KAAKC,KAD1B;AAAA,UACEC,KADF,eACEA,KADF;AAAA,UACSC,OADT,eACSA,OADT;AAAA,UAEEC,WAFF,GAEyDF,KAFzD,CAEEE,WAFF;AAAA,UAEeC,YAFf,GAEyDH,KAFzD,CAEeG,YAFf;AAAA,UAE6BC,SAF7B,GAEyDJ,KAFzD,CAE6BI,SAF7B;AAAA,UAEwCC,YAFxC,GAEyDL,KAFzD,CAEwCK,YAFxC;;AAGN,UAAI,CAACX,WAAL,EAAkB;AAClB,eAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFC,MAEK;AACL,eACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAGD;AACA;AAZH;;AAAA;AAAA,EAAgCY,SAAhC;AAaC","sourcesContent":["\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { AppLoading } from 'expo';\r\nimport * as Font from 'expo-font';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport Main from './app/screen/MainScreen';\r\nimport * as weatherActions from '../actions';\r\n\r\nfunction useFonts(fontMap) {\r\n  let [fontsLoaded, setFontsLoaded] = useState(false);\r\n  (async () => {\r\n    await Font.loadAsync(fontMap);\r\n    setFontsLoaded(true);\r\n  })();\r\n  return [fontsLoaded];\r\n}\r\nlet [fontsLoaded] = useFonts({\r\n    'montserrat-700': require('./app/assets/fonts/montserrat-700.ttf'),\r\n'montserrat-regular': require('./app/assets/fonts/montserrat-regular.ttf'),\r\n'verdana-regular': require('./app/assets/fonts/verdana-regular.ttf')\r\n  });\r\nexport class WeatherApp extends Component {\r\n\r\n  render(){\r\n    const { state, actions } = this.props;\r\n    const { weatherData, errorMessage, isLoading, isFahrenheit } = state;\r\n    if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  } else {\r\n    return (\r\n     <Main/>\r\n    );\r\n  }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}