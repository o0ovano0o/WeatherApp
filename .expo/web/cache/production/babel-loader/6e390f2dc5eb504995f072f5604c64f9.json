{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import React,{Component}from\"react\";import View from\"react-native-web/dist/exports/View\";import*as weatherActions from\"../actions\";import{bindActionCreators}from'redux';import{connect}from'react-redux';import CurrentWeather from\"./currentWeather\";import styles from\"../assets/style\";export var MainScreen=function(_Component){_inherits(MainScreen,_Component);var _super=_createSuper(MainScreen);function MainScreen(){_classCallCheck(this,MainScreen);return _super.apply(this,arguments);}_createClass(MainScreen,[{key:\"getLocation\",value:function getLocation(){var _this=this;navigator.geolocation.getCurrentPosition(function(position){var lat=position.coords.latitude.toString();var lon=position.coords.longitude.toString();_this.props.actions.searchByCoordinates(lat,lon);},function(){var errorMessage='Could not fetch weather for your location';_this.props.actions.setErrorMessage(errorMessage);},{enableHighAccuracy:true,timeout:20000,maximumAge:1000});}},{key:\"componentDidMount\",value:function componentDidMount(){return _regeneratorRuntime.async(function componentDidMount$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(this.getLocation());case 2:case\"end\":return _context.stop();}}},null,this,null,Promise);}},{key:\"render\",value:function render(){var state=this.props.state;var weatherData=state.weatherData,isLoading=state.isLoading,errorMessage=state.errorMessage;return React.createElement(View,{style:styles.container},React.createElement(CurrentWeather,{weatherData:weatherData,isLoading:isLoading,errorMessage:errorMessage}));}}]);return MainScreen;}(Component);export default connect(function(state){return{state:state};},function(dispatch){return{actions:bindActionCreators(weatherActions,dispatch)};})(MainScreen);","map":{"version":3,"sources":["C:/Users/Think Fap/Documents/GitHub/WeatherApp/app/screen/MainScreen.js"],"names":["React","Component","weatherActions","bindActionCreators","connect","CurrentWeather","styles","MainScreen","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","toString","lon","longitude","props","actions","searchByCoordinates","errorMessage","setErrorMessage","enableHighAccuracy","timeout","maximumAge","getLocation","state","weatherData","isLoading","container","dispatch"],"mappings":"++BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,qDAEA,MAAO,GAAKC,CAAAA,cAAZ,kBACA,OAASC,kBAAT,KAAmC,OAAnC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,cAAP,wBACA,MAAOC,CAAAA,MAAP,uBAEA,UAAaC,CAAAA,UAAb,+PACe,gBACXC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACM,SAACC,QAAD,CAAc,CACV,GAAMC,CAAAA,GAAG,CAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAAhB,CAAyBC,QAAzB,EAAZ,CACA,GAAMC,CAAAA,GAAG,CAAGL,QAAQ,CAACE,MAAT,CAAgBI,SAAhB,CAA0BF,QAA1B,EAAZ,CACA,KAAI,CAACG,KAAL,CAAWC,OAAX,CAAmBC,mBAAnB,CAAuCR,GAAvC,CAA4CI,GAA5C,EACH,CALP,CAMM,UAAM,CACF,GAAMK,CAAAA,YAAY,CAAG,2CAArB,CACA,KAAI,CAACH,KAAL,CAAWC,OAAX,CAAmBG,eAAnB,CAAmCD,YAAnC,EACH,CATP,CAUM,CAAEE,kBAAkB,CAAE,IAAtB,CAA4BC,OAAO,CAAE,KAArC,CAA4CC,UAAU,CAAE,IAAxD,CAVN,EAWD,CAbH,0OAeY,KAAKC,WAAL,EAfZ,8GAiBU,IACEC,CAAAA,KADF,CACY,KAAKT,KADjB,CACES,KADF,IAEAC,CAAAA,WAFA,CAEuCD,KAFvC,CAEAC,WAFA,CAEaC,SAFb,CAEuCF,KAFvC,CAEaE,SAFb,CAEuBR,YAFvB,CAEuCM,KAFvC,CAEuBN,YAFvB,CAGN,MACA,qBAAC,IAAD,EAAM,KAAK,CAAEf,MAAM,CAACwB,SAApB,EACM,oBAAC,cAAD,EACA,WAAW,CAAEF,WADb,CAEA,SAAS,CAAEC,SAFX,CAGA,YAAY,CAAER,YAHd,EADN,CADA,CASD,CA7BH,wBAAgCpB,SAAhC,EAiCA,cAAeG,CAAAA,OAAO,CAAC,SAAAuB,KAAK,QAAK,CAC/BA,KAAK,CAALA,KAD+B,CAAL,EAAN,CAGtB,SAAAI,QAAQ,QAAK,CACXZ,OAAO,CAAEhB,kBAAkB,CAACD,cAAD,CAAiB6B,QAAjB,CADhB,CAAL,EAHc,CAAP,CAMbxB,UANa,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport {View } from \"react-native\";\r\nimport * as weatherActions from '../actions';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport CurrentWeather from './currentWeather';\r\nimport styles from '../assets/style';\r\n\r\nexport class MainScreen extends Component {\r\n  getLocation(){\r\n    navigator.geolocation.getCurrentPosition( // eslint-disable-line\r\n          (position) => {\r\n              const lat = position.coords.latitude.toString();\r\n              const lon = position.coords.longitude.toString();\r\n              this.props.actions.searchByCoordinates(lat, lon);\r\n          },\r\n          () => {\r\n              const errorMessage = 'Could not fetch weather for your location';\r\n              this.props.actions.setErrorMessage(errorMessage);\r\n          },\r\n          { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 });\r\n  }\r\n async componentDidMount() {\r\n      await this.getLocation();\r\n  }\r\n  render(){\r\n    const { state } = this.props;\r\n    let { weatherData, isLoading,errorMessage} = state;\r\n    return (\r\n    <View style={styles.container}>\r\n          <CurrentWeather\r\n          weatherData={weatherData}\r\n          isLoading={isLoading}\r\n          errorMessage={errorMessage}\r\n          />\r\n    </View>\r\n  );\r\n  }\r\n\r\n}\r\n\r\nexport default connect(state => ({\r\n  state,\r\n}),\r\ndispatch => ({\r\n  actions: bindActionCreators(weatherActions, dispatch),\r\n}),\r\n)(MainScreen);"]},"metadata":{},"sourceType":"module"}